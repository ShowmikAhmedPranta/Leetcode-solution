https://leetcode.com/problems/n-th-tribonacci-number/

Problem:

1137. N-th Tribonacci Number


The Tribonacci sequence Tn is defined as follows: 

T0 = 0, T1 = 1, T2 = 1, and Tn+3 = Tn + Tn+1 + Tn+2 for n >= 0.

Given n, return the value of Tn.

 

Example 1:

Input: n = 4
Output: 4
Explanation:
T_3 = 0 + 1 + 1 = 2
T_4 = 1 + 1 + 2 = 4

Example 2:

Input: n = 25
Output: 1389537

 

Constraints:

    0 <= n <= 37
    The answer is guaranteed to fit within a 32-bit integer, ie. answer <= 2^31 - 1.


Solution:
***************************************************************************************************************
class Solution:
    
    memo={0:0,1:1,2:1,}
    
    def tribonacci(self, n: int) -> int:
        if(n not in self.memo.keys()):
            result= self.tribonacci(n-1)+self.tribonacci(n-2)+self.tribonacci(n-3)
            self.memo[n]=result
            return result
        else:
            result = self.memo[n]
            return result
********************************************************************************************************************
Submission details:
Runtime: 24 ms, faster than 91.85% of Python3 online submissions for N-th Tribonacci Number.
Memory Usage: 14.3 MB, less than 100.00% of Python3 online submissions for N-th Tribonacci Number.
******************************************************************************************************************
Explanation: I used Dynamic Programming with recursion. This approach is top-down(memoization).
            Also it is a good practice to add comma to the last element in tuple and dictionary.
             






