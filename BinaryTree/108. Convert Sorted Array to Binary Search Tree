https://leetcode.com/problems/convert-sorted-array-to-binary-search-tree/

Given an integer array nums where the elements are sorted in ascending order, convert it to a height-balanced binary search tree.

A height-balanced binary tree is a binary tree in which the depth of the two subtrees of every node never differs by more than one.

 

Example 1:


Input: nums = [-10,-3,0,5,9]
Output: [0,-3,9,-10,null,5]
Explanation: [0,-10,5,null,-3,null,9] is also accepted:

Example 2:


Input: nums = [1,3]
Output: [3,1]
Explanation: [1,3] and [3,1] are both a height-balanced BSTs.
 

Constraints:

1 <= nums.length <= 104
-104 <= nums[i] <= 104
nums is sorted in a strictly increasing order.
-------------------------------------------------------------------------------------------------------------------------------------------
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def sortedArrayToBST(self, nums: List[int]) -> Optional[TreeNode]:
        def makeroot(l,h):
            if(l==h):
                return TreeNode(nums[l])
            else:
                mid=(l+h)//2
                root=TreeNode(nums[mid])
                if(mid>l):
                    root.left=makeroot(l,mid-1)
                if(mid<h):
                    root.right=makeroot(mid+1,h)
                return root
        return makeroot(0,len(nums)-1)
--------------------------------------------------------------------------------------------------------------------------------------------------------------
Success
Details 
Runtime: 60 ms, faster than 72.57% of Python3 online submissions for Convert Sorted Array to Binary Search Tree.
Memory Usage: 15.8 MB, less than 16.65% of Python3 online submissions for Convert Sorted Array to Binary Search Tree.
