https://leetcode.com/problems/binary-tree-inorder-traversal/

Given the root of a binary tree, return the inorder traversal of its nodes' values.

 

Example 1:


Input: root = [1,null,2,3]
Output: [1,3,2]
Example 2:

Input: root = []
Output: []
Example 3:

Input: root = [1]
Output: [1]
 

Constraints:

The number of nodes in the tree is in the range [0, 100].
-100 <= Node.val <= 100
------------------------------------------------------------------------------------------------------------------------
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right

class Solution:
    def __init__(self):
        self._a=[]
    def inorderTraversal(self, root: Optional[TreeNode]) -> List[int]:
        if(root):
            self.inorderTraversal(root.left)
            self._a.append(root.val)
            self.inorderTraversal(root.right)
        return self._a
        
  ---------------------------------------------------------------------------------------------------------------------------------
  Success
Details 
Runtime: 52 ms, faster than 6.24% of Python3 online submissions for Binary Tree Inorder Traversal.
Memory Usage: 14.3 MB, less than 13.24% of Python3 online submissions for Binary Tree Inorder Traversal.
