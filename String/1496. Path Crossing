https://leetcode.com/problems/path-crossing/

Problem:

1496. Path Crossing


Given a string path, where path[i] = 'N', 'S', 'E' or 'W', each representing moving one unit north, south, east, or west, respectively. You start at the origin (0, 0) on a 2D plane and walk on the path specified by path.

Return True if the path crosses itself at any point, that is, if at any time you are on a location you've previously visited. Return False otherwise.

 ************two  image   missing ***********

Example 1:

Input: path = "NES"
Output: false 
Explanation: Notice that the path doesn't cross any point more than once.

Example 2:

Input: path = "NESWW"
Output: true
Explanation: Notice that the path visits the origin twice.

 

Constraints:

    1 <= path.length <= 10^4
    path will only consist of characters in {'N', 'S', 'E', 'W}
    
 Solution:
 **********************************************************************************************************************************
 class Solution:
    def isPathCrossing(self, path: str) -> bool:
        #path="NESWW"

        location_stac=[]

        x,y = 0,0

        v=str(x)+","+str(y)

        location_stac.append(v)

        D={'N':{'x':0,'y':1},
           'S':{'x':0,'y':-1},
           'E':{'x':1,'y':0},
           'W':{'x':-1,'y':0}}
            
        flag = False
        for i in path:
            x,y=x+D[i]['x'],y+D[i]['y']
            v=v=str(x)+","+str(y)
            if(v in location_stac):
                flag = True
            location_stac.append(v)
            #print(x,y)
        #print(flag)
        return flag
            
*****************************************************************************************************
Runtime: 2948 ms, faster than 6.63% of Python3 online submissions for Path Crossing.
Memory Usage: 14.6 MB, less than 100.00% of Python3 online submissions for Path Crossing.

