https://leetcode.com/problems/maximum-score-after-splitting-a-string/

Problem:

1422. Maximum Score After Splitting a String
Easy

Given a string s of zeros and ones, return the maximum score after splitting the string into two non-empty substrings (i.e. left substring and right substring).

The score after splitting a string is the number of zeros in the left substring plus the number of ones in the right substring.

 

Example 1:

Input: s = "011101"
Output: 5 
Explanation: 
All possible ways of splitting s into two non-empty substrings are:
left = "0" and right = "11101", score = 1 + 4 = 5 
left = "01" and right = "1101", score = 1 + 3 = 4 
left = "011" and right = "101", score = 1 + 2 = 3 
left = "0111" and right = "01", score = 1 + 1 = 2 
left = "01110" and right = "1", score = 2 + 1 = 3

Example 2:

Input: s = "00111"
Output: 5
Explanation: When left = "00" and right = "111", we get the maximum score = 2 + 3 = 5

Example 3:

Input: s = "1111"
Output: 3

 

Constraints:

    2 <= s.length <= 500
    The string s consists of characters '0' and '1' only.



Solution:
************************************************************************************************************************
class Solution:
    def maxScore(self, s: str) -> int:
        #s = "1111"
        ss=""
        s_stac = []
        total_1=0
        for i in s:
            ss=ss+i
            if(i=='1'):
                total_1 = total_1+1
            s_stac.append(ss)
            
        #print("s_stac=",s_stac)
        #print("total_1=",total_1)

        score_stac=[]
        for i in s_stac:
            zero_each =0
            one_each = 0
            
            for j in i:
                if(j=='0'):
                    zero_each = zero_each+1
                else:
                    one_each = one_each+1
            score=zero_each+total_1-one_each
            score_stac.append(score)
            
        score_stac.pop()

        #print("score_stac=",score_stac)
        
        m=max(score_stac)
        return m
   ******************************************************************************************
   Runtime: 104 ms, faster than 12.15% of Python3 online submissions for Maximum Score After Splitting a String.
Memory Usage: 14.3 MB, less than 100.00% of Python3 online submissions for Maximum Score After Splitting a String.

*************************************************************************************
I made a stack which contained all possible values. Total 1 was counted. For each value in stack,score=number of 0+(total 1- number of 1)
Then returned the maximum score.





