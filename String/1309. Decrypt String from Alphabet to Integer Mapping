https://leetcode.com/problems/decrypt-string-from-alphabet-to-integer-mapping/

Problem:

1309. Decrypt String from Alphabet to Integer Mapping
Easy

Given a string s formed by digits ('0' - '9') and '#' . We want to map s to English lowercase characters as follows:

    Characters ('a' to 'i') are represented by ('1' to '9') respectively.
    Characters ('j' to 'z') are represented by ('10#' to '26#') respectively. 

Return the string formed after mapping.

It's guaranteed that a unique mapping will always exist.

 

Example 1:

Input: s = "10#11#12"
Output: "jkab"
Explanation: "j" -> "10#" , "k" -> "11#" , "a" -> "1" , "b" -> "2".

Example 2:

Input: s = "1326#"
Output: "acz"

Example 3:

Input: s = "25#"
Output: "y"

Example 4:

Input: s = "12345678910#11#12#13#14#15#16#17#18#19#20#21#22#23#24#25#26#"
Output: "abcdefghijklmnopqrstuvwxyz"

 

Constraints:

    1 <= s.length <= 1000
    s[i] only contains digits letters ('0'-'9') and '#' letter.
    s will be valid string such that mapping is always possible.


Solution:
******************************************************************************************************************************
class Solution:
    def freqAlphabets(self, s: str) -> str:
        alp={}
        for i in range(1,27):
            alp[i]=chr(i+96)
        #s="10#11#12"
        c=0
        arr=[]
        a=s+'no'
        for i in range(0,len(s)):
            if(a[i]=='#'):
                c=c+1
            elif(a[i+1]=='#'):
                c=c+2
            elif(a[i+2]=='#'):
                b=s[i]+s[i+1]
                arr.append(b)
            else:
                arr.append(a[i])
        #print(arr)
        f=''
        for i in arr:
            f=f+alp[int(i)]
            
        return f

*****************************************************************************************************************************
I could have used stack and make backward loop to make easy solution. But memory consumption would have been increased. So I used loop without additional stack.

Submission Detail
40 / 40 test cases passed.
	Status: Accepted
Runtime: 24 ms
Memory Usage: 13.7 MB

You are here!
Your runtime beats 95.04 % of python3 submissions.

You are here!
Your memory usage beats 93.93 % of python3 submissions.

(I added NO with s to make the last loop valid in eye to python compiler.)













