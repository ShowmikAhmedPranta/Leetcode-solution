https://leetcode.com/problems/remove-duplicates-from-sorted-list/submissions/

Given the head of a sorted linked list, delete all duplicates such that each element appears only once. Return the linked list sorted as well.

 

Example 1:


Input: head = [1,1,2]
Output: [1,2]
Example 2:


Input: head = [1,1,2,3,3]
Output: [1,2,3]
 

Constraints:

The number of nodes in the list is in the range [0, 300].
-100 <= Node.val <= 100
The list is guaranteed to be sorted in ascending order.
-------------------------------------------------------------------------------------------------------
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def deleteDuplicates(self, head: Optional[ListNode]) -> Optional[ListNode]:
        t=head
        while(t):
            if(t.next and t.val==t.next.val):
                t.next=t.next.next
            else:
                t=t.next
        return head
                
 ------------------------------------------------------------------------------------------------------------------------------------
 Success
Details 
Runtime: 36 ms, faster than 94.40% of Python3 online submissions for Remove Duplicates from Sorted List.
Memory Usage: 14.3 MB, less than 57.45% of Python3 online submissions for Remove Duplicates from Sorted List.
