https://leetcode.com/problems/best-time-to-buy-and-sell-stock/

You are given an array prices where prices[i] is the price of a given stock on the ith day.

You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock.

Return the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0.

 

Example 1:

Input: prices = [7,1,5,3,6,4]
Output: 5
Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.
Note that buying on day 2 and selling on day 1 is not allowed because you must buy before you sell.
Example 2:

Input: prices = [7,6,4,3,1]
Output: 0
Explanation: In this case, no transactions are done and the max profit = 0.
 

Constraints:

1 <= prices.length <= 105
0 <= prices[i] <= 104
---------------------------------------------------------------------------------------------------------------------------------------------------------
class Solution:
    def maxProfit(self, prices: List[int]) -> int:
        a=[]
        l=len(prices)
        max_profit=0
        if(l==0):
            return 0
        if(l==1):
            return 0
        if(l==2):
            if(prices[1]>prices[0]):
                return prices[1]-prices[0]
            else:
                return 0
        if(l>=3):
            minn=10009
            maxx=0
            for i in prices:
                if(i>minn):
                    profi = i-minn
                    if(profi>maxx):
                        maxx=profi
                else:
                    minn=i
            return maxx
                    
                    
----------------------------------------------------------------------------------------------------------------------------------------------------------
Success
Details 
Runtime: 984 ms, faster than 78.80% of Python3 online submissions for Best Time to Buy and Sell Stock.
Memory Usage: 25.1 MB, less than 54.11% of Python3 online submissions for Best Time to Buy and Sell Stock.
