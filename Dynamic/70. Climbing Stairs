You are climbing a staircase. It takes n steps to reach the top.

Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?

 

Example 1:

Input: n = 2
Output: 2
Explanation: There are two ways to climb to the top.
1. 1 step + 1 step
2. 2 steps
Example 2:

Input: n = 3
Output: 3
Explanation: There are three ways to climb to the top.
1. 1 step + 1 step + 1 step
2. 1 step + 2 steps
3. 2 steps + 1 step
 

Constraints:

1 <= n <= 45
-----------------------------------------------------------------------------------------------------------------
class Solution:
    def __init__(self):
        self._data={0:1, 1:1}
    def climbStairs(self, n: int) -> int:
        if(n in self._data.keys()):
            return self._data[n]
        else:
            if((n-1) in self._data.keys() and (n-2) in self._data.keys()):
                self._data[n]= self._data[n-1]+self._data[n-2]
            return self.climbStairs(n-1)+self.climbStairs(n-2)
-------------------------------------------------------------------------------------------------------------------------
Success
Details 
Runtime: 43 ms, faster than 13.71% of Python3 online submissions for Climbing Stairs.
Memory Usage: 14.3 MB, less than 11.65% of Python3 online submissions for Climbing Stairs.
