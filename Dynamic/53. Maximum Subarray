https://leetcode.com/problems/maximum-subarray/

------------------------------------------------------------------------------------------------------------------------------------------------------------
Kadane's algorithm
---------------------------------------------------------------------------------------------------------------------------------------------------------------

Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.

A subarray is a contiguous part of an array.

 

Example 1:

Input: nums = [-2,1,-3,4,-1,2,1,-5,4]
Output: 6
Explanation: [4,-1,2,1] has the largest sum = 6.
Example 2:

Input: nums = [1]
Output: 1
Example 3:

Input: nums = [5,4,-1,7,8]
Output: 23
 

Constraints:

1 <= nums.length <= 105
-104 <= nums[i] <= 104
 

Follow up: If you have figured out the O(n) solution, try coding another solution using the divide and conquer approach, which is more subtle.
----------------------------------------------------------------------------------------------------------------------------------------------------------------
class Solution:
    def maxSubArray(self, nums: List[int]) -> int:
        l=len(nums)
        max_sum=0
        cur_max=0
        for i in range(l):
            cur_max=cur_max+nums[i]
            if(cur_max>max_sum):
                max_sum=cur_max
            if(cur_max<0):
                cur_max=0
        if(max_sum==0):
            return max(nums)
        else:
            return max_sum
------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Success
Details 
Runtime: 680 ms, faster than 93.56% of Python3 online submissions for Maximum Subarray.
Memory Usage: 28.5 MB, less than 71.40% of Python3 online submissions for Maximum Subarray.
