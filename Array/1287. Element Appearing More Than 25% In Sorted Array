https://leetcode.com/problems/element-appearing-more-than-25-in-sorted-array/

Problem:

1287. Element Appearing More Than 25% In Sorted Array


Given an integer array sorted in non-decreasing order, there is exactly one integer in the array that occurs more than 25% of the time.

Return that integer.

 

Example 1:

Input: arr = [1,2,2,6,6,6,6,7,10]
Output: 6

 

Constraints:

    1 <= arr.length <= 10^4
    0 <= arr[i] <= 10^5
    
  
Solution:
**************************************************************************************************************************************
class Solution:
    def findSpecialInteger(self, arr: List[int]) -> int:
        arr1=set(arr)
        counter=[]
        for i in arr1:
            count=0
            for j in arr:
                if(i==j):
                    count=count+1
            counter.append(count)
        max_occ=counter.index(max(counter))
        arr2=list(arr1)
        return arr2[max_occ]
        
            
*****************************************************************************************************************************
this approach is very slow O(n**2). I should try dictionary later to reduce to O(n).
  
  
  
  
  
