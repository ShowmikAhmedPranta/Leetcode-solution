https://leetcode.com/problems/array-partition-i/

Problem:

561. Array Partition I
Easy

Given an array of 2n integers, your task is to group these integers into n pairs of integer, say (a1, b1), (a2, b2), ..., (an, bn) which makes sum of min(ai, bi) for all i from 1 to n as large as possible.

Example 1:

Input: [1,4,3,2]

Output: 4
Explanation: n is 2, and the maximum sum of pairs is 4 = min(1, 2) + min(3, 4).

Note:

    n is a positive integer, which is in the range of [1, 10000].
    All the integers in the array will be in the range of [-10000, 10000].

Solution:
***************************************************************************************************************************************
class Solution:
    def arrayPairSum(self, nums: List[int]) -> int:
        if(len(nums)>20000):
            return 0
        nums.sort()
        for i in nums:
            if(i<-10000 or i>10000):
                return 0
        su=0
        for i in range(0,len(nums),2):
            su=su+nums[i]
        return su
        
*************************************************************************************************************************************************
Time complexity can be reduced by keeping constraints unchecked.
