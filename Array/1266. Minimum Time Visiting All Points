https://leetcode.com/problems/minimum-time-visiting-all-points/

Problem:

1266. Minimum Time Visiting All Points
Easy

On a plane there are n points with integer coordinates points[i] = [xi, yi]. Your task is to find the minimum time in seconds to visit all points.

You can move according to the next rules:

    In one second always you can either move vertically, horizontally by one unit or diagonally (it means to move one unit vertically and one unit horizontally in one second).
    You have to visit the points in the same order as they appear in the array.

****************************Picture Missing*****************************
 

Example 1:

Input: points = [[1,1],[3,4],[-1,0]]
Output: 7
Explanation: One optimal path is [1,1] -> [2,2] -> [3,3] -> [3,4] -> [2,3] -> [1,2] -> [0,1] -> [-1,0]   
Time from [1,1] to [3,4] = 3 seconds 
Time from [3,4] to [-1,0] = 4 seconds
Total time = 7 seconds

Example 2:

Input: points = [[3,2],[-2,2]]
Output: 5

Constraints:

    points.length == n
    1 <= n <= 100
    points[i].length == 2
    -1000 <= points[i][0], points[i][1] <= 1000


Solution:
**************************************************************************************************************************************
class Solution(object):
    def minTimeToVisitAllPoints(self, points):
        """
        :type points: List[List[int]]
        :rtype: int
        """
        n=len(points)
        if(n<1 or n>100):
            return 0
        for i in points:
            if(len(i)!=2):
                return 0
            if(i[0]<-1000 or i[0]>1000):
                return 0
            if(i[1]<-1000 or i[1]>1000):
                return 0
        x_dim=[]
        y_dim=[]
        x_m=[]
        y_m=[]
        for i in points:
            x_dim.append(i[0])
            y_dim.append(i[1])
    
        print(x_dim)
        print("\n")
        print(y_dim)
        print("\n")

        for i in range(0,len(x_dim)-1):
            m=abs(x_dim[i]-x_dim[i+1])
            x_m.append(m)
        for i in range(0,len(y_dim)-1):
            m=abs(y_dim[i]-y_dim[i+1])
            y_m.append(m)

        total=0

        for i in range(0,len(x_m)):
            total=total+max(x_m[i],y_m[i])
        return total
    *********************************************************************************
    Submission Detail
122 / 122 test cases passed.
	Status: Accepted
Runtime: 32 ms
Memory Usage: 11.9 MB

You are here!
Your runtime beats 99.86 % of python submissions.

