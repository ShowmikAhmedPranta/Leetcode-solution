https://leetcode.com/problems/count-negative-numbers-in-a-sorted-matrix/

Problem:
1351. Count Negative Numbers in a Sorted Matrix
Easy

Given a m * n matrix grid which is sorted in non-increasing order both row-wise and column-wise. 

Return the number of negative numbers in grid.

 

Example 1:

Input: grid = [[4,3,2,-1],[3,2,1,-1],[1,1,-1,-2],[-1,-1,-2,-3]]
Output: 8
Explanation: There are 8 negatives number in the matrix.

Example 2:

Input: grid = [[3,2],[1,0]]
Output: 0

Example 3:

Input: grid = [[1,-1],[-1,-1]]
Output: 3

Example 4:

Input: grid = [[-1]]
Output: 1

 

Constraints:

    m == grid.length
    n == grid[i].length
    1 <= m, n <= 100
    -100 <= grid[i][j] <= 100

Solution:
***************************************************************************************************************************************
class Solution(object):
    def countNegatives(self, grid):
        """
        :type grid: List[List[int]]
        :rtype: int
        """
        """constraints"""
        m=len(grid)
        if(m<1):
            return 0
        
        count=0
        for i in grid:
            if(len(i)>100):
                return 0
            for j in i:
                if(j<-100 or j>100):
                    return 0
                if(j<0):
                    count=count+1
                    
        return count
    ******************************************************************************************************************
    I used an easy technique.
    The complexity is O(n*n). So it is not best optimised.
    There is room to improve the solution.
